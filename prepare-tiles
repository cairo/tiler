#!/bin/bash

set -x

download_imagery_tiles() {
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/a1.jpg a1.jpg
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/a2.jpg a2.jpg
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/b1.jpg b1.jpg
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/b2.jpg b2.jpg
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/c1.jpg c1.jpg
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/c2.jpg c2.jpg
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/d1.jpg d1.jpg
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/$1/d2.jpg d2.jpg
}

download_elevation_tiles() {
    for tile in {a..p}; do
        aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/raw/elevation/$tile $tile
        aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/raw/elevation/$tile.hdr $tile.hdr
    done
}

download_vector_tiles() {
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://$OUTPUT_BUCKET_NAME/raw/vector/map.json map.json
}

translate_imagery_tiles() {
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr -180 90 -90 0 a1.jpg a1.tif
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr -180 0 -90 -90 a2.jpg a2.tif
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr -90 90 0 0 b1.jpg b1.tif
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr -90 0 0 -90 b2.jpg b2.tif
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr 0 90 90 0 c1.jpg c1.tif
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr 0 0 90 -90 c2.jpg c2.tif
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr 90 90 180 0 d1.jpg d1.tif
    gdal_translate -of GTiff -a_srs EPSG:4326 -a_ullr 90 0 180 -90 d2.jpg d2.tif
}

translate_elevation_tiles() {
    for tile in {a..p}; do
        echo "PIXELTYPE      SIGNEDINT" >> $tile.hdr
        gdal_translate -ot Byte -scale 0 10000 $tile $tile.tif
        gdal_edit.py -unsetnodata $tile.tif
    done
}

build_raster_xyz_tiles() {
    gdalbuildvrt -a_srs EPSG:4326 mosaic.vrt *.tif
    gdal2tiles.py --zoom 0-8 mosaic.vrt tiles
}

build_vector_xyz_tiles() {
    tippecanoe map.json --maximum-zoom=8 --detect-shared-borders --buffer=0 --output-to-directory=tiles

    set +x
    for pbf in $(find tiles -name '*.pbf'); do
        local z=$(echo $pbf | cut -d'/' -f 2)
        local x=$(echo $pbf | cut -d'/' -f 3)
        local y=$(echo $pbf | cut -d'/' -f 4 | sed 's/.pbf//')

        local flip_y=$((2 ** $z - 1 - $y))

        tippecanoe-decode $pbf $z $x $y > "tiles/$z/$x/$flip_y.json"
    done
    set -x
}

upload_xyz_tiles() {
    aws --endpoint-url $AWS_ENDPOINT_URL s3 cp --recursive --exclude "*" --include "$2" tiles s3://$OUTPUT_BUCKET_NAME/$OUTPUT_DIR/$1
}

clean_imagery() {
    rm *.jpg *.tif *.vrt
    rm -r tiles
}

clean_elevation() {
    for tile in {a..p}; do
        rm $tile
        rm $tile.hdr
    done

    rm *.tif *.vrt
    rm -r tiles
}

clean_vector() {
    rm map.json
    rm -r tiles
}

prepare_imagery_tileset() {
    download_imagery_tiles "$1"
    translate_imagery_tiles
    build_raster_xyz_tiles
    upload_xyz_tiles "$2" "*.png"
    clean_imagery
}

prepare_elevation_tileset() {
    download_elevation_tiles
    translate_elevation_tiles
    build_raster_xyz_tiles
    upload_xyz_tiles "elevation" "*.png"
    clean_elevation
}

prepare_vector_tileset() {
    download_vector_tiles
    build_vector_xyz_tiles
    upload_xyz_tiles "vector" "*.json"
    clean_vector
}

prepare_vector_tileset
prepare_elevation_tileset
prepare_imagery_tileset "raw/spring" "imagery/spring"
prepare_imagery_tileset "raw/summer" "imagery/summer"
prepare_imagery_tileset "raw/autumn" "imagery/autumn"
prepare_imagery_tileset "raw/winter" "imagery/winter"
